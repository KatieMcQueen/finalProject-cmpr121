Specification for part B:
  Implement a PersonType class. Use split implementation with a header and and implementation file.
  The file extension of the first must be .h, the extension of the second must be .cpp.

The class should have the following features:

  Features in this document should conform to the Unified Modeling Language standard
  Private members are designated with a minus -
  Public members are designated with a plus +
  variables have their datatypes designated following a colon
  functions have their paramaters datatypes designated as other variables, with a colon following the parameter
  functions have their return datatype designated following a colon

some examples:
  a private int variable named width:
    - width : int
  a public string variable named time:
    + time : string
  a public function with no parameters and no return called printHello:
    + printHello() : void
  a private function that takes a string variable called before and returns a string variable called reverse:
    - reverse(before : string) : string

NUM_OF_CAMPUSES
  a global constant to store the number of participating campuses

PersonType:
  member variables:
    - fName : string - a person's first name
    - lName : string - a person's last name
    - SSN : int - a person's social security number
  member functions:
    - formatName(firstName : string, lastName : string) const : string - returns a single "lastName, firstName" format string.

    - formatPersonInfo(socialSecurityNumber : int, firstName : string, lastName : string) const : string - returns the information of a person, including their name and SSN, in a single string.

    - formatSSN(SSN : int) const : string - returns the SSN as an ###-##-#### string.

    + PersonType() : PersonType - default constructor. Sets SSN to 0.

    + PersonType(firstName : string, lastName : string, socialSecurityNumber : int) : PersonType - initializes a person with the given values

    + setPerfonInfo(firstName : string, lastName : string, socialSecurityNumber: int) : void - re-sets the provided values
    (perfon is likely a typo, use the (likely) incorrect name from the specification unless and until it's fixed)
    (the specification doesn't explicitly call for a return type. I've assumed void, but bool is a possible alternative)

    + getFirstName() const : string - return the person's first name

    + getLastName() const : string - return the person's last name

    + getSSN() const : int - returns the person's social security number

    + printName() : void - print the person's first and last name
    (formatted as "lName, fName)
    (void is assumed again)

    + printPersonInfo() : void - prints the full set of information about a person
    (calls printSSN() to format the social security number)
    (formatted as ###-##-#### fName lName)
    (void is assumed again)

    + printSSN() : void - formats the social security number and prints the formatted string
    (###-##-####)
    (void is assumed)

    + ~PersonType() - destructor. Left empty

CandidateType:
  inherits from PersonType
  member variables:
    - totalVote : int - total number of votes
    - campusVotes : int[NUM_OF_CAMPUSES] - an array of votes by campus
  member functions:
    + CandidateType() : CandidateType - default constructor, initialize all votest to 0

    + updateVotesByCampus(campusNumber : int, numVotes : int) : void - updates the number of votes to the selected campus to the number provided

    + getTotalVotes() : const int - returns total number of votes

    + getVotesByCampus(campusNumber : int) : const int - returns the number of votes for a particular campus

    + printCandidateInfo() : void - prints the candidate info
    (formated as "###-##-####-lName, fName")

    + printCandidateTotalVotes() : void - prints the total number of votes
    (formatted as "Lastname, Firstname \n\t" "Total Votes ( all campuses): ##")
    (in other words, it has a linebreak followed by a tab)

    + printCandidateCampusVotes(campusNumber : int) : void - prints the candidates votes for the specified campus
    (formated as "Lastname, Firstname \n\t" "Campus # total vote: ##)

    + ~CandidateType() - default destructor

Specification extension:
(helper functions not needed by the client or to be exposed in the api)
(these formatters can be more easily tested and simplify both functions)
(they should all simply return a string that complies to the formatting specification of their coresponding print function)
  - formatName() : string - format a string to conform to printName()
  - formatPersonInfo() : string - format a string to conform to printPersonInfo()
  - formatSSN() : string - format a string to conform to pringSSN()

The client encourages us to consider carefully:
  * passing by reference
  * using const modifiers for our parameters
  * using const modifiers with our functions

The client also requested a main function that can test our class's implementation.
